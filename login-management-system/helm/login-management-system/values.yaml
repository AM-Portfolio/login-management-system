## Default values for login-management-system service
## This is a YAML-formatted file.

replicaCount: 1

image:
  repository: ghcr.io/am-portfolio/login-management-system
  pullPolicy: Always
  tag: "0.0.3-SNAPSHOT"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "vault-auth"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: login-management-system.INGRESS_IP.nip.io
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 300m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Environment configuration
environment: "preprod"

# PostgreSQL configuration
postgresql:
  enabled: true
  fullname: "postgresql"
  primary:
    service:
      port: 5432
  auth:
    database: "jwtlogin"

# Vault configuration
vault:
  enabled: true
  secretPaths:
    postgres: "kv/preprod/database/postgres"
    jwt: "kv/preprod/jwt"

# Application specific configuration
config:
  jwt:
    tokenValidity: 18000  # 5 hours in seconds
    secretKey: "jwt-secret-key"
  cors:
    allowedOrigins: "*"
    allowedMethods: "GET,POST,PUT,DELETE,OPTIONS"
    allowedHeaders: "*"

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    scrape: "true"
    path: "/actuator/prometheus"
    port: "8080"
