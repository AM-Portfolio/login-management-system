name: Build and Publish Maven Package

on:
  push:
    branches: [ main, develop, feature/** ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages
      run: mvn --batch-mode deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Get Current Version
      id: current_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release Version
      if: contains(steps.current_version.outputs.current_version, 'SNAPSHOT')
      run: |
        # Extract version without SNAPSHOT
        RELEASE_VERSION=$(echo ${{ steps.current_version.outputs.current_version }} | sed 's/-SNAPSHOT//')
        # Update to release version
        mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false
        git commit -am "Release version $RELEASE_VERSION"
        git tag -a "v$RELEASE_VERSION" -m "Release version $RELEASE_VERSION"
        
        # Calculate next version
        IFS='.' read -r -a VERSION_PARTS <<< "$RELEASE_VERSION"
        MINOR_VERSION=$((VERSION_PARTS[1] + 1))
        NEXT_VERSION="${VERSION_PARTS[0]}.$MINOR_VERSION.0-SNAPSHOT"
        
        # Update to next snapshot version
        mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false
        git commit -am "Prepare for next development iteration $NEXT_VERSION"
        
        # Push changes
        git push origin HEAD:main
        git push origin "v$RELEASE_VERSION"

    - name: Create GitHub Release
      if: contains(steps.current_version.outputs.current_version, 'SNAPSHOT')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.current_version.outputs.current_version }}
        name: Release ${{ steps.current_version.outputs.current_version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}